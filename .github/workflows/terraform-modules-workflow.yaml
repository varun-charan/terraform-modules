name: Terraform Modules CI

on:
  push:
    branches:
      # Meant for NETxxyy-* tickets
      - feature/*
      # Meant for DEVOPS-* tickets
      - hotfix/*
    # DO NOT trigger workflow run on updates to templates
    paths-ignore:
      - '.github/**'
      - '.tflint/**'
      - '!.github/workflows/terraform-modules-workflow.yaml'
  pull_request:
    types:
      - opened
      - synchronize
      - closed
    branches:
      # Meant for running after PR merged on master
      - master
    # DO NOT trigger workflow run on updates to templates
    paths-ignore:
      - '.github/**'
      - '.tflint/**'
      - '!.github/workflows/terraform-modules-workflow.yaml'
  # For manual trigger of job, if required. Avoids need to use dummy commits to initiate workflow.Applicable to master branch only since for it, source tag is picked from Git tags and not from Commit hash as is the case for dev branches.
  workflow_dispatch:

jobs:
  # # U S I N G   P Y A C T I O N
  # exec_command:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Test pyaction with exec devops cli command
  #     uses: varun-charan/pyaction@v0.5.0
  #     with:
  #       index_url_pip: ${{ secrets.INDEX_URL_PIP }}
  #       command: "exec"
  #       args: "python3 --version"
  
  # non_exec_command:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     stdout: ${{ steps.pyaction_non_exec_cmd.outputs.stdout }}
  #   steps:
  #   - name: Test pyaction with non-exec devops cli command
  #     id: pyaction_non_exec_cmd
  #     uses: varun-charan/pyaction@v0.5.0
  #     env:
  #       VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  #       VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  #     with:
  #       devops_version: "v0.5.0"
  #       index_url_pip: ${{ secrets.INDEX_URL_PIP }}
  #       export_list: "VAULT_ADDR=${{ env.VAULT_ADDR }}, VAULT_TOKEN=${{ env.VAULT_TOKEN }}"
  #       command: "vault"
  #       subcommand: "get"
  #       args: "prd/devops/newreleases automation_api_key"

  # test_vault_output:
  #   runs-on: ubuntu-latest
  #   needs: [ non_exec_command ]
  #   steps:
  #     - name: Test if pyaction vault command returned correct output
  #       shell: bash
  #       run: |
  #         echo "::add-mask::$API_KEY"
  #         curl --location --request GET 'https://api.newreleases.io/v1/projects' --header 'X-Key: ${{ env.API_KEY }}'
  #       env:
  #         API_KEY: ${{ needs.non_exec_command.outputs.stdout }}

  # T E R R A F O R M   C I C D 
  get_target_modules:
    runs-on: ubuntu-latest
    outputs:
      tf_modules: ${{ steps.get_target_tf_modules.outputs.tf_modules }}
    steps:
      - name: Checkout application GitHub repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get target TF modules
        id: get_target_tf_modules
        shell: bash
        run: |
          chmod +x .github/scripts/**
          ./.github/scripts/get_target_modules.sh
        env:
          BRANCH_NAME: ${{ github.ref_name || github.base_ref }}

  static-analysis:
    needs: [ get_target_modules ]
    runs-on: ubuntu-latest
    if: needs.get_target_modules.outputs.tf_modules != '[]'
    strategy:
      matrix:
        TF_MODULE: "${{ fromJson(needs.get_target_modules.outputs.tf_modules) }}"
    steps:
    - name: Checkout application GitHub repo
      uses: actions/checkout@v3
      if: github.event_name != 'pull_request'

    - name: Checkout application repo in case of PRs only
      uses: actions/checkout@v3
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Setup Terraform  
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.11

    - name: Render terraform docs inside the README.md and push changes back to PR branch
      uses: terraform-docs/gh-actions@v1.0.0
      if: github.event_name == 'pull_request'
      with:
        working-dir: ${{ matrix.TF_MODULE }}
        output-file: README.md
        output-method: inject
        git-push: "true"
        git-commit-message: "[skip ci] Terraform-Docs automated action"

    - name: Terraform Format
      id: fmt
      run: terraform -chdir=${{ matrix.TF_MODULE }} fmt -check -recursive -diff

    - name: Terraform Init
      id: init
      run: terraform -chdir=${{ matrix.TF_MODULE }} init

    - name: Terraform Validate
      id: validate
      run: terraform -chdir=${{ matrix.TF_MODULE }} validate

    - uses: actions/cache@v2
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: tflint-${{ hashFiles('.tflint/tflint.hcl') }}
    
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v2
      with:
        tflint_version: v0.44.1

    - name: Init TFLint
      run: tflint --chdir=${{ matrix.TF_MODULE }} --config=$(realpath .tflint/tflint.hcl) --init 

    - name: Run TFLint
      run: tflint --chdir=${{ matrix.TF_MODULE }} --config=$(realpath .tflint/tflint.hcl)

    # - name: Get AWS Access Key ID
    #   id: aws_access_key_id
    #   uses: varun-charan/pyaction@v0.5.0
    #   env:
    #     VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
    #     VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
    #   with:
    #     devops_version: "v0.5.0"
    #     index_url_pip: ${{ secrets.INDEX_URL_PIP }}
    #     export_list: "VAULT_ADDR=${{ env.VAULT_ADDR }}, VAULT_TOKEN=${{ env.VAULT_TOKEN }}"
    #     command: "vault"
    #     subcommand: "get"
    #     args: "prd/devops/aws/api-users/barco-eci-sandbox AWS_ACCESS_KEY_ID"
    
    # - name: Get AWS Secret Access Key
    #   id: aws_secret_access_key
    #   uses: varun-charan/pyaction@v0.5.0
    #   env:
    #     VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
    #     VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
    #   with:
    #     devops_version: "v0.5.0"
    #     index_url_pip: ${{ secrets.INDEX_URL_PIP }}
    #     export_list: "VAULT_ADDR=${{ env.VAULT_ADDR }}, VAULT_TOKEN=${{ env.VAULT_TOKEN }}"
    #     command: "vault"
    #     subcommand: "get"
    #     args: "prd/devops/aws/api-users/barco-eci-sandbox AWS_SECRET_ACCESS_KEY"

    # - name: Terraform Plan
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #   id: plan
    #   run: |
    #     echo "::add-mask::$AWS_ACCESS_KEY_ID"
    #     echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
    #     export AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
    #     export AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
    #     terraform -chdir=${{ matrix.TF_MODULE }} plan -var-file=.ci/tfplan.tfvars
    #   continue-on-error: true
  
    # - name: Update Pull Request
    #   uses: actions/github-script@v6
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

    #       <details><summary>Show Plan</summary>

    #       \`\`\`\n
    #       ${process.env.PLAN}
    #       \`\`\`

    #       </details>

    #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

    # - name: Terraform Plan Status
    #   if: steps.plan.outcome == 'failure'
    #   run: exit 1

  security:
    needs: [ get_target_modules ]
    uses: varun-charan/reusable-workflows/.github/workflows/iac-security-scans.yaml@master
    with:
      target_dirs: ${{ needs.get_target_modules.outputs.tf_modules }}
      terrascan_iac_type: "terraform"
      terrascan_iac_version: "v15"
    secrets:
      snyk_auth_token: ${{ secrets.SNYK_AUTH_TOKEN }}

  costing:
    needs: [ get_target_modules ]
    uses: varun-charan/reusable-workflows/.github/workflows/calculate-infracost.yaml@master
    with:
      target_dirs: ${{ needs.get_target_modules.outputs.tf_modules }}
    secrets:
      infracost_api_key: ${{ secrets.INFRACOST_API_KEY }}

  # Label PRs depending on branch name.
  pr-labeler:
    permissions:
      contents: read # for TimonVS/pr-labeler-action to read config file
      pull-requests: write # for TimonVS/pr-labeler-action to add labels in PR
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
    steps:
      - uses: TimonVS/pr-labeler-action@v4.1.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/config/pr-labeler.yml

  tagging:
    needs: [get_target_modules, static-analysis, security, costing]
    runs-on: ubuntu-latest
    if: github.base_ref == 'master' && github.event.pull_request.merged == true
    strategy:
      matrix:
        TF_MODULE: "${{ fromJson(needs.get_target_modules.outputs.tf_modules) }}"
    permissions: write-all
    steps:
      - name: Checkout application repo in case of PRs only
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: mukunku/tag-exists-action@v1.2.0
        id: checkTag
        with: 
          tag: "${{ matrix.TF_MODULE }}-0.0.0"

      - name: If base tag doesn't exist, fail the pipeline.
        if: ${{ steps.checkTag.outputs.exists == false }}
        run: |
          echo "Base tag ${{ matrix.TF_MODULE }}-0.0.0 doesn't exist. Create and re-run this workflow."
          exit 1

      - name: Get the next version of the tag
        id: get_next_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # DO NOT create Git tag. Just calculate new tag version.
          # dry_run: true
          default_bump: minor
          tag_prefix: "${{ matrix.TF_MODULE }}-"
          
      - name: Debug
        shell: bash
        run: |
          echo "New Tag: $new_tag"
          echo "Previous Tag: $prev_tag"
        env:
          new_tag: ${{ steps.get_next_tag.outputs.new_tag }}
          prev_tag: ${{ steps.get_next_tag.outputs.previous_tag }}

      - name: Update Changelog
        id: update_changelog
        uses: mikepenz/release-changelog-builder-action@v3.6.0
        env:
          configuration: ".github/config/changelog-configuration.json"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: "${{ matrix.TF_MODULE }}"
          repo: "./${{ matrix.TF_MODULE }}"
          fromTag: ${{ steps.get_next_tag.outputs.previous_tag }}
          toTag: ${{ steps.get_next_tag.outputs.new_tag }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_next_tag.outputs.new_tag }}
          name: ${{ steps.get_next_tag.outputs.new_tag }}
          body: ${{ steps.github_release.outputs.changelog }}
      
      - name: Notify dedicated teams channel
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "&#x1F680 Released new Terraform Module tag - ${{ steps.get_next_tag.outputs.new_tag }}" 
          notification-color: 28a745
          timezone: Asia/Calcutta
    
  # run_terraform_apply:
  #   needs: [get_target_modules, static-analysis, security, costing]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #   strategy:
  #     matrix:
  #       TF_MODULE: "${{ fromJson(needs.get_target_modules.outputs.tf_modules) }}"
  #   steps:
  #     - run: terraform -chdir=${{ matrix.TF_MODULE }} apply -auto-approve -var-file=.ci/tfplan.tfvars
  